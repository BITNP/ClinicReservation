// <auto-generated />
using ClinicReservation.Models.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace ClinicReservation.Migrations
{
    [DbContext(typeof(DataDbContext))]
    partial class DataDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ClinicReservation.Models.Data.BoardMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsPublic");

                    b.Property<string>("Message")
                        .HasMaxLength(256);

                    b.Property<DateTime>("PostedTime");

                    b.Property<int?>("PosterId");

                    b.Property<int>("ReservationId");

                    b.HasKey("Id");

                    b.HasIndex("PosterId");

                    b.HasIndex("ReservationId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("ClinicReservation.Models.Data.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<string>("DefaultName")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("ClinicReservation.Models.Data.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<string>("DefaultName")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("ClinicReservation.Models.Data.DutySchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Day");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("ClinicReservation.Models.Data.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Content")
                        .HasMaxLength(256);

                    b.Property<int>("Rate");

                    b.Property<int>("ReservationForeignKey");

                    b.HasKey("Id");

                    b.HasIndex("ReservationForeignKey")
                        .IsUnique();

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("ClinicReservation.Models.Data.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<string>("DefaultName")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("ClinicReservation.Models.Data.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CategoryId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Detail")
                        .HasMaxLength(512);

                    b.Property<int?>("DutyId");

                    b.Property<DateTime>("LastActionDate");

                    b.Property<string>("LastUsedCulture")
                        .HasMaxLength(8);

                    b.Property<DateTime>("LastUserModifiedDate");

                    b.Property<int>("LocationId");

                    b.Property<int>("PosterId");

                    b.Property<DateTime>("ReservationDate");

                    b.Property<int>("State");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DutyId");

                    b.HasIndex("LocationId");

                    b.HasIndex("PosterId");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("ClinicReservation.Models.Data.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Avatar");

                    b.Property<int>("DepartmentId");

                    b.Property<string>("Email");

                    b.Property<string>("GitHub")
                        .HasMaxLength(64);

                    b.Property<string>("IM")
                        .HasMaxLength(64);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<string>("Phone")
                        .HasMaxLength(64);

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ClinicReservation.Models.Data.UserGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<string>("DefaultName")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("UserGroups");
                });

            modelBuilder.Entity("ClinicReservation.Models.Data.UserGroupUser", b =>
                {
                    b.Property<int>("GroupId");

                    b.Property<int>("UserId");

                    b.HasKey("GroupId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserGroupUser");
                });

            modelBuilder.Entity("ClinicReservation.Models.Data.BoardMessage", b =>
                {
                    b.HasOne("ClinicReservation.Models.Data.User", "Poster")
                        .WithMany("PostedMessages")
                        .HasForeignKey("PosterId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ClinicReservation.Models.Data.Reservation", "Reservation")
                        .WithMany("Messages")
                        .HasForeignKey("ReservationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ClinicReservation.Models.Data.DutySchedule", b =>
                {
                    b.HasOne("ClinicReservation.Models.Data.User", "User")
                        .WithMany("Schedules")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ClinicReservation.Models.Data.Feedback", b =>
                {
                    b.HasOne("ClinicReservation.Models.Data.Reservation", "Reservation")
                        .WithOne("Feedback")
                        .HasForeignKey("ClinicReservation.Models.Data.Feedback", "ReservationForeignKey")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("ClinicReservation.Models.Data.Reservation", b =>
                {
                    b.HasOne("ClinicReservation.Models.Data.Category", "Category")
                        .WithMany("Reservations")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ClinicReservation.Models.Data.User", "Duty")
                        .WithMany("DutiedReservations")
                        .HasForeignKey("DutyId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ClinicReservation.Models.Data.Location", "Location")
                        .WithMany("Reservations")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ClinicReservation.Models.Data.User", "Poster")
                        .WithMany("PostedReservations")
                        .HasForeignKey("PosterId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ClinicReservation.Models.Data.User", b =>
                {
                    b.HasOne("ClinicReservation.Models.Data.Department", "Department")
                        .WithMany("Users")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ClinicReservation.Models.Data.UserGroupUser", b =>
                {
                    b.HasOne("ClinicReservation.Models.Data.UserGroup", "Group")
                        .WithMany("Users")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ClinicReservation.Models.Data.User", "User")
                        .WithMany("Groups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
